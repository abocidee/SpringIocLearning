<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Because <context:annotation-config/> is switched on, the container 
		recognizes the @Configuration annotation and processes the @Bean methods 
		declared in AppConfig properly -->

	<context:annotation-config />
	<!-- <配置组件扫描> -->
	<context:component-scan
		base-package="cn.tedu.spring.entity" />
	<context:component-scan
		base-package="cn.tedu.spring.controller" />
	<context:component-scan
		base-package="cn.tedu.spring.config" />
	<!-- <util:properties id="overConfig" location="classpath:override.properties" 
		/> -->

	<!-- when the above bean (messenger) is instantiated, this custom BeanPostProcessor 
		implementation will output the fact to the system console -->
	<!-- 读取properties文件内容配置 -->
	<bean
		class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties" />
	</bean>

	<!--重写属性 -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyOverrideConfigurer"> 
		<property name="locations"> <list> <value>/override.properties</value> </list> 
		</property> </bean> -->

	<!-- 实例 -->
	<bean name="duck" class="cn.tedu.spring.entity.Duck">
		<property name="name" value="duck bean property in xml"></property>
	</bean>

	<!-- <bean name="lunong" class="cn.tedu.spring.entity.LuNongYun"> <qualifier 
		value="half"></qualifier> <property name="name" value="lunongyun half qualifier"></property> 
		</bean> -->
	<!-- <bean id ="movie" class="cn.tedu.spring.entity.Movie"> <qualifier type="genre" 
		value="comdy"></qualifier> <constructor-arg type="java.lang.String" value="${movie.name}" 
		/> </bean> -->

	<bean id="movie" class="cn.tedu.spring.entity.Movie">
		<!-- <qualifier type="genre" value="action"></qualifier> -->
		<constructor-arg type="java.lang.String"
			value="action movie" />
	</bean>

	<bean name="picture" class="cn.tedu.spring.entity.Picture"></bean>
	<bean name="pen" class="cn.tedu.spring.entity.Pen"></bean>

	<bean
		class="cn.tedu.spring.processer.InstantiationTracingBeanPostProcessor"></bean>
	<bean class="cn.tedu.spring.processer.BeanFactorypp"></bean>

	<!-- this MessageSource is being used in a web application -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="exceptions" />
	</bean>

	<!-- lets inject the above MessageSource into this POJO -->
	<bean id="example" class="cn.tedu.spring.example.Example">
		<property name="messages" ref="messageSource" />
	</bean>
	<bean id="crosFilter" class="cn.tedu.spring.config.CorsFilter"></bean>


</beans>